<div class="max-w-md mx-auto mt-12 p-8 bg-white shadow rounded">
  <h2 class="text-2xl font-bold mb-6 text-center" style="color: <%= @family.theme_colors[:primary] %>">Edit Family Settings</h2>

  <%= form_with model: @family, local: true, data: { turbo: false } do |form| %>
    <% if @family.errors.any? %>
      <div class="mb-4 p-4 bg-red-50 border border-red-200 rounded">
        <h3 class="text-red-700 font-medium">Please fix the following errors:</h3>
        <ul class="list-disc list-inside text-sm text-red-600">
          <% @family.errors.full_messages.each do |message| %>
            <li><%= message %></li>
          <% end %>
        </ul>
      </div>
    <% end %>

    <div class="space-y-6">
      <div>
        <%= form.label :name, "Family Name", class: "block mb-2 font-semibold", style: "color: #{@family.theme_colors[:primary]}" %>
        <%= form.text_field :name, class: "w-full px-4 py-2 border rounded", 
            style: "border-color: #{@family.theme_colors[:secondary]}; color: #{@family.theme_colors[:primary]};" %>
      </div>

      <div>
        <h3 class="font-semibold mb-4" style="color: <%= @family.theme_colors[:primary] %>">Family Theme</h3>
        <div class="relative">
          <%= form.select :theme,
              Family::THEME_PRESETS.map { |key, theme| [theme[:name], key] },
              { selected: @family.theme },
              class: "w-full px-4 py-2 border rounded appearance-none cursor-pointer",
              style: "border-color: #{@family.theme_colors[:secondary]}; color: #{@family.theme_colors[:primary]};",
              data: { action: "change->theme#update" }
          %>
          <div class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" style="color: <%= @family.theme_colors[:secondary] %>">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
            </svg>
          </div>
        </div>
        <div class="flex gap-2 mt-4">
          <div class="flex-1 p-4 rounded-lg shadow-sm border" id="themePreview" style="border-color: <%= @family.theme_colors[:secondary] %>">
            <div class="flex gap-2 items-center">
              <div id="primaryColorPreview" class="w-6 h-6 rounded"></div>
              <div id="secondaryColorPreview" class="w-6 h-6 rounded"></div>
              <span id="themeName" class="text-sm font-medium" style="color: <%= @family.theme_colors[:primary] %>"></span>
            </div>
          </div>
        </div>
        <p class="text-sm mt-2" style="color: <%= @family.theme_colors[:secondary] %>">Choose a theme that reflects your family's personality.</p>
      </div>

      <div class="flex items-center justify-between gap-4">
        <%= form.submit "Update Family", 
            class: "px-5 py-2 rounded transition-all duration-300",
            style: "background-color: #{@family.theme_colors[:primary]}; color: white; hover:background-color: #{@family.theme_colors[:secondary]};" %>
        <%= link_to "Cancel", family_path(@family), 
            class: "text-sm hover:underline", 
            style: "color: #{@family.theme_colors[:secondary]}" %>
      </div>
    </div>
  <% end %>
</div>

<%= content_tag :div, "", data: { controller: "theme" } %>

<script>
document.addEventListener("DOMContentLoaded", function() {
  const themeSelect = document.querySelector('select[name="family[theme]"]');
  const primaryPreview = document.getElementById('primaryColorPreview');
  const secondaryPreview = document.getElementById('secondaryColorPreview');
  const themeName = document.getElementById('themeName');
  
  const themePresets = <%= raw Family::THEME_PRESETS.to_json %>;
  
  function updatePreviews() {
    const selectedTheme = themePresets[themeSelect.value];
    if (selectedTheme) {
      primaryPreview.style.backgroundColor = selectedTheme.primary;
      secondaryPreview.style.backgroundColor = selectedTheme.secondary;
      themeName.textContent = selectedTheme.name;
    }
  }

  themeSelect.addEventListener('change', updatePreviews);

  // Set initial state
  updatePreviews();
});
</script>